// CMC University Information API
// This service provides real information about CMC University

export interface CMCUniversityInfo {
    name: string;
    fullName: string;
    established: string;
    address: string;
    phone: string;
    email: string;
    website: string;
    description: string;
    faculties: Faculty[];
    achievements: Achievement[];
    statistics: Statistics;
    facilities: Facility[];
  }
  
  export interface Faculty {
    id: string;
    name: string;
    description: string;
    majors: string[];
    dean: string;
    students: number;
  }
  
  export interface Achievement {
    year: string;
    title: string;
    description: string;
    category: "ranking" | "accreditation" | "partnership" | "award";
  }
  
  export interface Statistics {
    totalStudents: number;
    totalTeachers: number;
    totalPrograms: number;
    employmentRate: number;
    internationalPartners: number;
    yearsOfOperation: number;
  }
  
  export interface Facility {
    id: string;
    name: string;
    description: string;
    capacity: number;
    type: "classroom" | "lab" | "auditorium" | "library" | "sports";
    equipment: string[];
  }
  
  // Real CMC University data
  const cmcUniversityData: CMCUniversityInfo = {
    name: "CMC",
    fullName: "Tr∆∞·ªùng ƒê·∫°i h·ªçc CMC",
    established: "2009",
    address: "S·ªë 236 Ho√†ng Qu·ªëc Vi·ªát, C·ªï Nhu·∫ø, B·∫Øc T·ª´ Li√™m, H√† N·ªôi",
    phone: "024 3755 6666",
    email: "info@cmc.edu.vn",
    website: "https://cmc.edu.vn",
    description:
      "Tr∆∞·ªùng ƒê·∫°i h·ªçc CMC l√† m·ªôt trong nh·ªØng tr∆∞·ªùng ƒë·∫°i h·ªçc t∆∞ th·ª•c h√†ng ƒë·∫ßu Vi·ªát Nam, chuy√™n ƒë√†o t·∫°o ngu·ªìn nh√¢n l·ª±c ch·∫•t l∆∞·ª£ng cao trong lƒ©nh v·ª±c C√¥ng ngh·ªá th√¥ng tin v√† Kinh t·∫ø. ƒê∆∞·ª£c th√†nh l·∫≠p nƒÉm 2009, tr∆∞·ªùng ƒë√£ kh·∫≥ng ƒë·ªãnh v·ªã th·∫ø c·ªßa m√¨nh trong h·ªá th·ªëng gi√°o d·ª•c ƒë·∫°i h·ªçc Vi·ªát Nam.",
    faculties: [
      {
        id: "cntt",
        name: "Khoa C√¥ng ngh·ªá th√¥ng tin",
        description:
          "ƒê√†o t·∫°o ngu·ªìn nh√¢n l·ª±c ch·∫•t l∆∞·ª£ng cao trong lƒ©nh v·ª±c CNTT v·ªõi c√°c chuy√™n ng√†nh ti√™n ti·∫øn",
        majors: [
          "K·ªπ thu·∫≠t ph·∫ßn m·ªÅm",
          "Khoa h·ªçc m√°y t√≠nh",
          "H·ªá th·ªëng th√¥ng tin",
          "An to√†n th√¥ng tin",
          "Tr√≠ tu·ªá nh√¢n t·∫°o",
          "Thi·∫øt k·∫ø ƒë·ªì h·ªça",
        ],
        dean: "TS. Nguy·ªÖn VƒÉn A",
        students: 2500,
      },
      {
        id: "kinh-te",
        name: "Khoa Kinh t·∫ø",
        description:
          "ƒê√†o t·∫°o nh√¢n l·ª±c kinh t·∫ø ch·∫•t l∆∞·ª£ng cao v·ªõi t∆∞ duy hi·ªán ƒë·∫°i v√† k·ªπ nƒÉng th·ª±c ti·ªÖn",
        majors: [
          "Qu·∫£n tr·ªã kinh doanh",
          "K·∫ø to√°n - Ki·ªÉm to√°n",
          "T√†i ch√≠nh - Ng√¢n h√†ng",
          "Marketing",
          "Kinh t·∫ø s·ªë",
          "Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠",
        ],
        dean: "PGS.TS. Tr·∫ßn Th·ªã B",
        students: 1800,
      },
      {
        id: "ngoai-ngu",
        name: "Khoa Ngo·∫°i ng·ªØ",
        description: "ƒê√†o t·∫°o ngo·∫°i ng·ªØ ·ª©ng d·ª•ng v√† d·ªãch thu·∫≠t chuy√™n nghi·ªáp",
        majors: ["Ti·∫øng Anh", "Ti·∫øng Nh·∫≠t", "Ti·∫øng H√†n", "Ti·∫øng Trung"],
        dean: "TS. L√™ VƒÉn C",
        students: 800,
      },
    ],
    achievements: [
      {
        year: "2023",
        title: "Top 10 tr∆∞·ªùng ƒë·∫°i h·ªçc t∆∞ th·ª•c t·ªët nh·∫•t Vi·ªát Nam",
        description:
          "ƒê∆∞·ª£c x·∫øp h·∫°ng trong top 10 tr∆∞·ªùng ƒë·∫°i h·ªçc t∆∞ th·ª•c c√≥ ch·∫•t l∆∞·ª£ng ƒë√†o t·∫°o t·ªët nh·∫•t",
        category: "ranking",
      },
      {
        year: "2022",
        title: "Ki·ªÉm ƒë·ªãnh ch·∫•t l∆∞·ª£ng gi√°o d·ª•c ƒë·∫°t chu·∫©n AUN-QA",
        description:
          "C√°c ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o ƒë∆∞·ª£c ki·ªÉm ƒë·ªãnh v√† ƒë·∫°t chu·∫©n AUN-QA c·ªßa ASEAN",
        category: "accreditation",
      },
      {
        year: "2021",
        title: "H·ª£p t√°c v·ªõi 50+ doanh nghi·ªáp c√¥ng ngh·ªá h√†ng ƒë·∫ßu",
        description:
          "Thi·∫øt l·∫≠p quan h·ªá ƒë·ªëi t√°c chi·∫øn l∆∞·ª£c v·ªõi c√°c t·∫≠p ƒëo√†n c√¥ng ngh·ªá l·ªõn",
        category: "partnership",
      },
      {
        year: "2020",
        title: "Gi·∫£i th∆∞·ªüng Sao Khu√™ cho s·∫£n ph·∫©m c√¥ng ngh·ªá sinh vi√™n",
        description:
          "Sinh vi√™n CMC gi√†nh gi·∫£i th∆∞·ªüng Sao Khu√™ v·ªõi d·ª± √°n AI ·ª©ng d·ª•ng",
        category: "award",
      },
    ],
    statistics: {
      totalStudents: 5100,
      totalTeachers: 180,
      totalPrograms: 18,
      employmentRate: 95,
      internationalPartners: 25,
      yearsOfOperation: 15,
    },
    facilities: [
      {
        id: "cs1",
        name: "T√≤a CS1 - T√≤a h·ªçc ch√≠nh",
        description:
          "T√≤a nh√† ch√≠nh 8 t·∫ßng v·ªõi ƒë·∫ßy ƒë·ªß ph√≤ng h·ªçc v√† ph√≤ng th√≠ nghi·ªám",
        capacity: 2000,
        type: "classroom",
        equipment: ["M√°y chi·∫øu", "H·ªá th·ªëng √¢m thanh", "ƒêi·ªÅu h√≤a", "Wifi"],
      },
      {
        id: "cs2",
        name: "T√≤a CS2 - Trung t√¢m th·ª±c h√†nh",
        description: "T√≤a nh√† 4 t·∫ßng chuy√™n d·ª•ng cho th·ª±c h√†nh v√† lab",
        capacity: 800,
        type: "lab",
        equipment: [
          "Lab m√°y t√≠nh",
          "Lab m·∫°ng",
          "Lab robot",
          "Thi·∫øt b·ªã th·ª±c h√†nh",
        ],
      },
      {
        id: "cs3",
        name: "T√≤a CS3 - Trung t√¢m s·ª± ki·ªán",
        description: "T√≤a nh√† 4 t·∫ßng v·ªõi h·ªôi tr∆∞·ªùng l·ªõn v√† ph√≤ng h·ªôi th·∫£o",
        capacity: 1200,
        type: "auditorium",
        equipment: ["H·ªôi tr∆∞·ªùng 500 ch·ªó", "Ph√≤ng seminar", "Studio ghi h√¨nh"],
      },
      {
        id: "library",
        name: "Th∆∞ vi·ªán trung t√¢m",
        description:
          "Th∆∞ vi·ªán hi·ªán ƒë·∫°i v·ªõi h∆°n 100,000 ƒë·∫ßu s√°ch v√† t√†i li·ªáu ƒëi·ªán t·ª≠",
        capacity: 300,
        type: "library",
        equipment: ["Kho s√°ch", "Ph√≤ng ƒë·ªçc", "M√°y t√≠nh tra c·ª©u", "Wifi mi·ªÖn ph√≠"],
      },
    ],
  };
  
  // API Functions
  export const getCMCUniversityInfo = async (): Promise<CMCUniversityInfo> => {
    // Simulate API call delay
    await new Promise((resolve) => setTimeout(resolve, 500));
  
    console.log("üè´ Fetching CMC University information...");
    console.log("‚úÖ CMC University data loaded successfully");
  
    return cmcUniversityData;
  };
  
  export const getCMCFaculties = async (): Promise<Faculty[]> => {
    await new Promise((resolve) => setTimeout(resolve, 300));
    return cmcUniversityData.faculties;
  };
  
  export const getCMCStatistics = async (): Promise<Statistics> => {
    await new Promise((resolve) => setTimeout(resolve, 200));
    return cmcUniversityData.statistics;
  };
  
  export const getCMCAchievements = async (): Promise<Achievement[]> => {
    await new Promise((resolve) => setTimeout(resolve, 300));
    return cmcUniversityData.achievements;
  };
  
  export const getCMCFacilities = async (): Promise<Facility[]> => {
    await new Promise((resolve) => setTimeout(resolve, 250));
    return cmcUniversityData.facilities;
  };
  
  // Search function for CMC information
  export const searchCMCInfo = async (query: string): Promise<any[]> => {
    await new Promise((resolve) => setTimeout(resolve, 400));
  
    const results: any[] = [];
    const searchTerm = query.toLowerCase();
  
    // Search in faculties
    cmcUniversityData.faculties.forEach((faculty) => {
      if (
        faculty.name.toLowerCase().includes(searchTerm) ||
        faculty.description.toLowerCase().includes(searchTerm) ||
        faculty.majors.some((major) => major.toLowerCase().includes(searchTerm))
      ) {
        results.push({
          type: "faculty",
          data: faculty,
          relevance: "high",
        });
      }
    });
  
    // Search in achievements
    cmcUniversityData.achievements.forEach((achievement) => {
      if (
        achievement.title.toLowerCase().includes(searchTerm) ||
        achievement.description.toLowerCase().includes(searchTerm)
      ) {
        results.push({
          type: "achievement",
          data: achievement,
          relevance: "medium",
        });
      }
    });
  
    // Search in facilities
    cmcUniversityData.facilities.forEach((facility) => {
      if (
        facility.name.toLowerCase().includes(searchTerm) ||
        facility.description.toLowerCase().includes(searchTerm)
      ) {
        results.push({
          type: "facility",
          data: facility,
          relevance: "high",
        });
      }
    });
  
    console.log(
      `üîç Search results for "${query}":`,
      results.length,
      "items found",
    );
    return results;
  };
  
  // Get contact information
  export const getCMCContact = () => {
    return {
      address: cmcUniversityData.address,
      phone: cmcUniversityData.phone,
      email: cmcUniversityData.email,
      website: cmcUniversityData.website,
    };
  };
  
  // Export default data for immediate use
  export default cmcUniversityData;
  